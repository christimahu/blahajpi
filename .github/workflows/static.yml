# .github/workflows/static.yml
name: Deploy Documentation and Website

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build documentation job
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install documentation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          pip install mkdocs mkdocs-material
      
      - name: Prepare documentation directories
        run: |
          mkdir -p web/docs
          echo "Documentation will be generated directly to web/docs"
      
      - name: Generate API documentation with Doxygen
        run: |
          # Check if Doxyfile exists, if not create it
          if [ ! -f "Doxyfile" ]; then
            echo "Creating Doxyfile for documentation generation"
            doxygen -g
            # Configure Doxygen to output directly to web/docs
            echo "PROJECT_NAME = \"Blahaj PI\"" >> Doxyfile
            echo "PROJECT_BRIEF = \"Your friendly shark detective keeping social waters safe\"" >> Doxyfile
            echo "OUTPUT_DIRECTORY = web/docs" >> Doxyfile
            echo "HTML_OUTPUT = ." >> Doxyfile
            echo "INPUT = lib/include lib/src cli/include cli/src" >> Doxyfile
            echo "RECURSIVE = YES" >> Doxyfile
            echo "EXTRACT_ALL = YES" >> Doxyfile
            echo "GENERATE_HTML = YES" >> Doxyfile
            echo "GENERATE_LATEX = NO" >> Doxyfile
            echo "HTML_COLORSTYLE_HUE = 200" >> Doxyfile
            echo "HTML_COLORSTYLE_SAT = 120" >> Doxyfile
          fi
          
          # Run Doxygen to generate documentation
          doxygen
          
          # Verify documentation was generated
          if [ -f "web/docs/index.html" ]; then
            echo "Doxygen documentation generated successfully"
          else
            echo "Warning: Doxygen index.html not found at expected location"
            find web/docs -name "index.html" || echo "No index.html found in web/docs"
          fi
          
      - name: Build MkDocs documentation (optional)
        run: |
          # Create basic docs structure if it doesn't exist
          mkdir -p docs/user-guide docs/developer-guide
          
          # Create mkdocs configuration if it doesn't exist
          if [ ! -f "docs/mkdocs.yml" ]; then
            echo "Creating basic MkDocs configuration"
            echo "site_name: Blahaj PI" > docs/mkdocs.yml
            echo "theme: readthedocs" >> docs/mkdocs.yml
            
            # Create a minimal index if it doesn't exist
            if [ ! -f "docs/index.md" ]; then
              echo "# Blahaj PI" > docs/index.md
              echo "Your friendly shark detective keeping social waters safe." >> docs/index.md
            fi
          fi
          
          # Build MkDocs to web/docs/user
          # This preserves the API docs generated by Doxygen
          mkdir -p web/docs/user
          mkdocs build -f docs/mkdocs.yml -d web/docs/user || echo "MkDocs build failed, continuing anyway"
      
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact for deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'web'

  # Deployment job
  deploy:
    needs: build-docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
